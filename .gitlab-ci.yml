---
default:
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/yocto-builder:latest
  tags: [docker, yocto]

variables:
  FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR: true
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_DEPTH: 0
  # don't clean Yocto build/tmp directory per default
  GIT_CLEAN_FLAGS: -ffdx -e build/

stages:
  - build
  - deploy

before_script:
  - echo 'DL_DIR="/cache/downloads"' >> ./build/conf/local.conf
  - echo 'SSTATE_DIR="/cache/sstate-cache"' >> ./build/conf/local.conf
  - cp -v $RAUC_CRT sources/meta-sysworxx/keys/rauc.crt
  - cp -v $RAUC_KEY sources/meta-sysworxx/keys/rauc.key
  - export GIT_DESCRIBE=$(git describe --tags)

.rules-dev: &rules-dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  variables:
    RAUC_CRT: $RAUC_CRT_DEFAULT
    RAUC_KEY: $RAUC_KEY_DEFAULT

.rules-release: &rules-release
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    RAUC_CRT: $RAUC_CRT_RELEASE
    RAUC_KEY: $RAUC_KEY_RELEASE

.sysworxx-image-default:
  stage: build
  script: |
    cd build/
    . conf/setenv
    bitbake sysworxx-image-default
    cp deploy-ti/images/sysworxx/sysworxx-image-default-sysworxx.rootfs.wic.xz \
       ../E004494-sysworxx-image-default-sysworxx-${GIT_DESCRIBE}.rootfs.wic.xz
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    when: on_success
    expire_in: 1 week
    paths:
      - "E004494-*.wic.xz"

.sysworxx-image-browser-hmi:
  stage: build
  script: |
    cd build/
    . conf/setenv
    bitbake sysworxx-image-browser-hmi
    cp deploy-ti/images/sysworxx/sysworxx-image-browser-hmi-sysworxx.rootfs.wic.xz \
       ../E004495-sysworxx-image-browser-hmi-sysworxx-${GIT_DESCRIBE}.rootfs.wic.xz
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    when: on_success
    expire_in: 1 week
    paths:
      - "E004495-*.wic.xz"

sysworxx-image-default-dev:
  extends: .sysworxx-image-default
  <<: *rules-dev

sysworxx-image-default-release:
  extends: .sysworxx-image-default
  <<: *rules-release

sysworxx-image-browser-hmi-dev:
  extends: .sysworxx-image-browser-hmi
  <<: *rules-dev

sysworxx-image-browser-hmi-release:
  extends: .sysworxx-image-browser-hmi
  <<: *rules-release

.sysworxx-bundle-default:
  tags:
    - seccomp_unconfined
  stage: build
  script: |
    cd build/
    . conf/setenv
    bitbake sysworxx-bundle-default
    cp deploy-ti/images/sysworxx/sysworxx-bundle-default-sysworxx.raucb \
       ../E004493-sysworxx-bundle-default-sysworxx-${GIT_DESCRIBE}.raucb
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    when: on_success
    expire_in: 1 week
    paths:
      - "E004493-*.raucb"

sysworxx-bundle-default-dev:
  extends: .sysworxx-bundle-default
  <<: *rules-dev

sysworxx-bundle-default-release:
  extends: .sysworxx-bundle-default
  <<: *rules-release

.emmc-installer:
  stage: build
  script: |
    cd build/
    . conf/setenv
    bitbake sysworxx-bundle-default
    ../emmc-installer/build.sh
    cp ./sysworxx-image-default-emmc-installer.sh \
       ../E004481-sysworxx-image-default-emmc-installer-${GIT_DESCRIBE}.sh
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    when: on_success
    expire_in: 1 week
    paths:
      - E004481-*.sh

emmc-installer-dev:
  extends: .emmc-installer
  <<: *rules-dev

emmc-installer-release:
  extends: .emmc-installer
  <<: *rules-release

bare-repo-release:
  stage: deploy
  image:
    name: alpine
  variables:
    GIT_STRATEGY: clone
    GIT_CHECKOUT: "false"
  before_script:
    - |
      mkdir -p /cache/apk/
      apk add --cache-dir /cache/apk/ git
  script:
    - |
      describe="${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}-${CI_COMMIT_SHORT_SHA}"
      gitc="git -C "${CI_PROJECT_NAME}.git""
      project_url=$(git -C .git/ remote -v | grep fetch | awk '{print $2}')
      rm -r .git

      git clone --bare ${project_url} "${CI_PROJECT_NAME}.git"

      if [[ -n "${CI_COMMIT_BRANCH}" && "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]]; then
        $gitc branch | grep -v -e "${CI_DEFAULT_BRANCH}" -e ${CI_COMMIT_BRANCH} | xargs $gitc branch -D
      else
        $gitc branch | grep -v -e "${CI_DEFAULT_BRANCH}" | xargs $gitc branch -D
      fi
      $gitc gc
      $gitc remote remove origin

      echo branches:
      $gitc branch
      echo tags:
      $gitc tag

      tar jcfv "${CI_PROJECT_NAME}-${describe}.tar.bz2" "${CI_PROJECT_NAME}.git"
      tar zcfv "${CI_PROJECT_NAME}-${describe}.tar.gz" "${CI_PROJECT_NAME}.git"
  artifacts:
    paths:
      - "./${CI_PROJECT_NAME}-*.tar.*"
  only:
    refs:
      - master
      - web
      - merge_requests
      - tags
